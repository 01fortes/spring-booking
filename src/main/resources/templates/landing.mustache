<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{pageTitle}}</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap"
          rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #f5f7fa;
            color: #333;
        }

        /* Header styles */
        header {
            background-color: #2c3e50;
            color: white;
            padding: 1.5rem 3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 10;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
        }

        nav ul {
            display: flex;
            list-style: none;
        }

        nav ul li {
            margin-left: 2rem;
        }

        nav ul li a {
            color: white;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        nav ul li a:hover {
            color: #3498db;
        }

        /* Hero section */
        .hero {
            height: 80vh;
            background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('https://images.unsplash.com/photo-1496417263034-38ec4f0b665a');
            background-size: cover;
            background-position: center;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 0 1rem;
        }

        .hero h1 {
            font-size: 3.5rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.6);
        }

        .hero p {
            font-size: 1.5rem;
            max-width: 800px;
            margin-bottom: 2rem;
            text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.6);
        }

        .cta-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 1rem 2rem;
            font-size: 1.2rem;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            text-decoration: none;
            display: inline-block;
        }

        .cta-button:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        /* Features section */
        .features {
            padding: 5rem 2rem;
            background-color: white;
        }

        .features-container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
        }

        .feature-card {
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

        .feature-icon {
            font-size: 2.5rem;
            color: #3498db;
            margin-bottom: 1rem;
        }

        .feature-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .feature-description {
            color: #666;
            line-height: 1.6;
        }

        /* Chat widget */
        .chat-widget {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 350px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.15);
            z-index: 100;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
            max-height: 500px;
        }

        .chat-header {
            background: #3498db;
            color: white;
            padding: 15px;
            border-radius: 10px 10px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
        }

        .chat-header h3 {
            margin: 0;
            font-size: 1.1rem;
        }

        .chat-toggle {
            cursor: pointer;
            font-size: 1.2rem;
        }

        .chat-body {
            height: 300px;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .messages-container {
            display: flex;
            flex-direction: column;
            min-height: 100%;
        }

        .message {
            margin-bottom: 15px;
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 10px;
            position: relative;
            line-height: 1.5;
        }

        .message-content {
            white-space: pre-line;
        }

        .message-content h3 {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 1.5rem 0 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid rgba(52, 152, 219, 0.2);
            color: #2c3e50;
        }

        .message-content .hotel-room {
            background: rgba(52, 152, 219, 0.05);
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
        }

        .message-content .room-number {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 10px;
            color: #2c3e50;
        }

        .message-content .room-features {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .message-content .feature-item {
            display: flex;
            margin: 8px 0;
            padding: 5px 0;
            border-bottom: 1px solid rgba(52, 152, 219, 0.1);
        }

        .message-content .feature-label {
            font-weight: 500;
            min-width: 160px;
            color: #666;
        }

        .message-content .feature-value {
            color: #2c3e50;
        }

        .bot-message .message-content h3 {
            color: #2c3e50;
        }

        .user-message .message-content h3 {
            color: white;
            border-bottom-color: rgba(255, 255, 255, 0.2);
        }

        .user-message .message-content .hotel-room {
            background: rgba(255, 255, 255, 0.1);
        }

        .user-message .message-content .room-number,
        .user-message .message-content .feature-value {
            color: white;
        }

        .user-message .message-content .feature-label {
            color: rgba(255, 255, 255, 0.8);
        }

        .user-message .message-content .feature-item {
            border-bottom-color: rgba(255, 255, 255, 0.1);
        }

        .message-content em {
            font-style: italic;
            background-color: rgba(255, 255, 255, 0.1);
            padding: 0 4px;
            border-radius: 3px;
        }

        .message-content strong {
            font-weight: 700;
            background-color: rgba(255, 255, 255, 0.1);
            padding: 0 4px;
            border-radius: 3px;
        }

        .bot-message .message-content em,
        .bot-message .message-content strong {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .message-content ul {
            list-style-position: inside;
            margin: 10px 0;
            padding-left: 10px;
        }

        .message-content li {
            margin: 5px 0;
        }

        .structured-info {
            background: rgba(255, 255, 255, 0.1);
            padding: 8px;
            border-radius: 5px;
            margin: 5px 0;
        }

        .info-item {
            display: flex;
            gap: 5px;
            margin: 3px 0;
        }

        .info-label {
            font-weight: 500;
        }

        .room-details {
            border-left: 3px solid rgba(255, 255, 255, 0.2);
            margin: 10px 0;
            padding-left: 10px;
        }

        .user-message {
            align-self: flex-end;
            background-color: #3498db;
            color: white;
        }

        .bot-message {
            align-self: flex-start;
            background-color: #ecf0f1;
            color: #333;
        }

        .message-time {
            font-size: 0.7rem;
            opacity: 0.7;
            margin-top: 5px;
            text-align: right;
        }

        .typing-indicator {
            display: none;
            align-self: flex-start;
            background-color: #ecf0f1;
            color: #666;
            padding: 12px 20px;
            border-radius: 10px;
            margin-top: auto;
            font-size: 0.9rem;
            margin-bottom: 0;
        }

        .typing-indicator span {
            display: inline-block;
            animation: typingDot 1.4s infinite;
            margin: 0 2px;
            opacity: 0.7;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typingDot {
            0%, 60%, 100% {
                transform: translateY(0);
            }
            30% {
                transform: translateY(-4px);
            }
        }

        .chat-input.disabled input,
        .chat-input.disabled button {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .chat-input {
            padding: 15px;
            border-top: 1px solid #eee;
            display: flex;
        }

        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            font-family: inherit;
        }

        .chat-input button {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            margin-left: 10px;
            border-radius: 20px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .chat-input button:hover {
            background: #2980b9;
        }

        .chat-widget.collapsed .chat-body,
        .chat-widget.collapsed .chat-input {
            display: none;
        }

        .chat-widget.collapsed {
            height: auto;
        }

        /* Footer */
        footer {
            background-color: #2c3e50;
            color: white;
            padding: 2rem 0;
            text-align: center;
        }

        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
        }

        .copyright {
            margin-top: 1rem;
            opacity: 0.7;
            font-size: 0.9rem;
        }

        .message-content .hotel-item {
            background: rgba(52, 152, 219, 0.05);
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            border-left: 3px solid #3498db;
        }

        .message-content .hotel-name {
            font-size: 1.1rem;
            margin-bottom: 8px;
            color: #2c3e50;
        }

        .message-content .hotel-location {
            display: flex;
            gap: 8px;
            color: #666;
        }

        .message-content .location-label {
            font-weight: 500;
            color: #666;
        }

        .message-content .location-value {
            color: #2c3e50;
        }

        .user-message .message-content .hotel-item {
            background: rgba(255, 255, 255, 0.1);
            border-left-color: rgba(255, 255, 255, 0.3);
        }

        .user-message .message-content .hotel-name,
        .user-message .message-content .location-value {
            color: white;
        }

        .user-message .message-content .location-label {
            color: rgba(255, 255, 255, 0.8);
        }
    </style>
</head>
<body>
<!-- Header -->
<header>
    <div class="logo">BookingPro</div>
    <nav>
        <ul>
            <li><a href="#">Home</a></li>
            <li><a href="#">Destinations</a></li>
            <li><a href="#">Special Offers</a></li>
            <li><a href="#">About Us</a></li>
            <li><a href="#">Contact</a></li>
        </ul>
    </nav>
</header>

<!-- Hero Section -->
<section class="hero">
    <h1>Your Dream Vacation Awaits</h1>
    <p>Discover amazing places and experiences. Book your perfect getaway today with our exclusive deals.</p>
    <a href="#" class="cta-button">Explore Destinations</a>
</section>

<!-- Features Section -->
<section class="features">
    <div class="features-container">
        <div class="feature-card">
            <div class="feature-icon"><i class="fas fa-map-marker-alt"></i></div>
            <h3 class="feature-title">Exclusive Locations</h3>
            <p class="feature-description">Discover hand-picked destinations all around the world, from relaxing beach
                resorts to exciting city escapes.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon"><i class="fas fa-dollar-sign"></i></div>
            <h3 class="feature-title">Best Price Guarantee</h3>
            <p class="feature-description">We promise the best rates for your stay. If you find a better price, we'll
                match it and give you an extra discount.</p>
        </div>
        <div class="feature-card">
            <div class="feature-icon"><i class="fas fa-concierge-bell"></i></div>
            <h3 class="feature-title">Premium Service</h3>
            <p class="feature-description">Enjoy 24/7 customer support, personalized travel plans, and a seamless
                booking experience from start to finish.</p>
        </div>
    </div>
</section>

<!-- Chat Widget -->
<div class="chat-widget" id="chatWidget">
    <div class="chat-header" id="chatHeader">
        <h3>Chat with Us</h3>
        <span class="chat-toggle" id="chatToggle"><i class="fas fa-chevron-down"></i></span>
    </div>
    <div class="chat-body" id="chatBody">
        <div class="messages-container" id="messagesContainer">
            <!-- Messages will be added here dynamically -->
        </div>
        <div class="typing-indicator" id="typingIndicator">
            Печатает<span>.</span><span>.</span><span>.</span>
        </div>
    </div>
    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type your message...">
        <button id="sendButton">Send</button>
    </div>
</div>

<!-- Footer -->
<footer>
    <div class="footer-content">
        <p>BookingPro - Your trusted travel companion since 2010</p>
        <p class="copyright">© 2023 BookingPro. All rights reserved.</p>
    </div>
</footer>

<script>
    // Generate a random user ID for demo purposes
    const userId = 'user_' + Math.random().toString(36).substring(2, 10);

    // Chat functionality
    document.addEventListener('DOMContentLoaded', function () {
        const chatWidget = document.getElementById('chatWidget');
        const chatToggle = document.getElementById('chatToggle');
        const chatHeader = document.getElementById('chatHeader');
        const chatBody = document.getElementById('chatBody');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const typingIndicator = document.getElementById('typingIndicator');
        const chatInputContainer = document.querySelector('.chat-input');

        let isWaitingResponse = false;

        function setInputState(disabled) {
            messageInput.disabled = disabled;
            sendButton.disabled = disabled;
            chatInputContainer.classList.toggle('disabled', disabled);
            isWaitingResponse = disabled;
            typingIndicator.style.display = disabled ? 'block' : 'none';
        }

        // Toggle chat open/closed
        chatHeader.addEventListener('click', function () {
            chatWidget.classList.toggle('collapsed');
            const icon = chatToggle.querySelector('i');
            if (chatWidget.classList.contains('collapsed')) {
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            } else {
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        });

        // Send message when clicking the send button
        sendButton.addEventListener('click', sendMessage);

        // Send message when pressing Enter in the input field
        messageInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter' && !isWaitingResponse) {
                sendMessage();
            }
        });

        // Load chat history on page load
        loadChatHistory();

        function sendMessage() {
            const message = messageInput.value.trim();
            if (message === '' || isWaitingResponse) return;

            // Clear input field and disable input
            messageInput.value = '';
            setInputState(true);

            // Immediately add user message
            addMessage(message, 'user', getCurrentTime());

            // Scroll to bottom to show typing indicator
            chatBody.scrollTop = chatBody.scrollHeight;

            // Send message to server
            fetch('/chat/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-User-Id': userId
                },
                body: JSON.stringify({message: message})
            })
                    .then(data => data.text())
                    .then(data => {
                        // Add bot response
                        addMessage(data, 'bot', getCurrentTime());

                        // Enable input
                        setInputState(false);

                        // Scroll to bottom
                        chatBody.scrollTop = chatBody.scrollHeight;
                    })
                    .catch(error => {
                        console.error('Error sending message:', error);
                        // Enable input even if there was an error
                        setInputState(false);
                        // Add error message
                        addMessage("Извините, произошла ошибка. Пожалуйста, попробуйте еще раз.", 'bot', getCurrentTime());
                    });
        }

        function loadChatHistory() {
            fetch('/chat/history', {
                headers: {
                    'X-User-Id': userId
                }
            })
                    .then(response => response.json())
                    .then(messages => {
                        if (messages.length > 0) {
                            messages.forEach(msg => {
                                addMessage(msg.content, msg.sender, msg.time);
                            });
                            chatBody.scrollTop = chatBody.scrollHeight;
                        } else {
                            // Add welcome message if no history
                            addMessage("Hello! How can I help you with your booking today?", 'bot', getCurrentTime());
                        }
                    })
                    .catch(error => console.error('Error loading chat history:', error));
        }

        function addMessage(content, sender, time) {
            const messageEl = document.createElement('div');
            messageEl.classList.add('message');
            messageEl.classList.add(sender === 'user' ? 'user-message' : 'bot-message');

            const messageContent = document.createElement('div');
            messageContent.classList.add('message-content');
            
            // Преобразование текста в HTML с сохранением форматирования
            let formattedContent = content
                // Обработка жирного текста (**текст**)
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                // Обработка заголовков
                .replace(/### (.*?)(?:\n|$)/g, '<h3>$1</h3>')
                // Обработка списка отелей
                .replace(/(\d+)\.\s+\*\*(.*?)\*\*\s*\n\s*-\s*Локация:\s*(.*?)(?=\n\d+\.\s+\*\*|$)/g, (match, num, hotel, location) => {
                    return `<div class="hotel-item">
                        <div class="hotel-name"><strong>${hotel}</strong></div>
                        <div class="hotel-location">
                            <span class="location-label">Локация:</span>
                            <span class="location-value">${location}</span>
                        </div>
                    </div>`;
                })
                // Обработка номеров комнат
                .replace(/(\d+)\.\s*Комната\s*(\d+)([\s\S]*?)(?=(?:\d+\.\s*Комната|\n*### |$))/g, (match, num, roomNum, details) => {
                    const features = details.split('\n').filter(line => line.trim());
                    const formattedFeatures = features
                        .map(feature => {
                            if (feature.includes(':')) {
                                const [label, value] = feature.split(':').map(s => s.trim());
                                if (label.startsWith('-')) {
                                    return `<div class="feature-item">
                                        <span class="feature-label">${label.substring(1).trim()}</span>
                                        <span class="feature-value">${value}</span>
                                    </div>`;
                                }
                            }
                            return feature;
                        })
                        .join('');
                    
                    return `<div class="hotel-room">
                        <div class="room-number">Комната ${roomNum}</div>
                        <div class="room-features">${formattedFeatures}</div>
                    </div>`;
                })
                // Обработка переносов строк
                .replace(/\n\n+/g, '<br><br>')
                .replace(/\n/g, '<br>');

            messageContent.innerHTML = formattedContent;

            const messageTime = document.createElement('div');
            messageTime.classList.add('message-time');
            messageTime.textContent = time;

            messageEl.appendChild(messageContent);
            messageEl.appendChild(messageTime);
            document.getElementById('messagesContainer').appendChild(messageEl);
            
            // Прокрутка до индикатора печатания
            typingIndicator.scrollIntoView({ behavior: 'smooth' });
        }

        function getCurrentTime() {
            const now = new Date();
            return now.getHours().toString().padStart(2, '0') + ':' +
                    now.getMinutes().toString().padStart(2, '0');
        }
    });
</script>
</body>
</html>
